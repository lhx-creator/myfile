function [P_phi_matrix] = F1_P_phi(A, P_phi_matrix, fq_fun )
P = zeros(1,A.R);

for j = 1:A.R%R
    for i = 1:A.Nphi%I
        a = P_phi_matrix(:,:,i,j);
        CCC(1,i+(j-1)*A.Nphi) = a(1,1);
    end
end
CCC = diag(CCC);

cvx_begin sdp
%     variable P_phi_matrix(A.Nphi,A.R) 
    %variable CCC(1,A.R*A.Nphi) nonnegative
    variable CCC(A.R*A.Nphi,A.R*A.Nphi) hermitian semidefinite
    expression P(A.R);
    minimize ( (-1) * fq_fun )
    subject to
    for j = 1:A.R%R
        for i = 1:A.Nphi%I
            P(j) = P(j) + CCC(i+(j-1)*A.Nphi,i+(j-1)*A.Nphi);
            %P(j) = P(j) + CCC(1,i+(j-1)*A.Nphi);
%             P(j) = P(j) + P_phi_matrix(i,j);
        end
        P(j) == 1;
    end
    for j = 1:A.R%R
        for i = 1:A.Nphi%I
%             a = P_phi_matrix(i,j);
%             CCC(i+(j-1) * A.Nphi) = a;
            CCC(i+(j-1)*A.Nphi,i+(j-1)*A.Nphi) <= 1;
        %0 <= CCC(1,i+(j-1)*A.Nphi) <= 1;
%             P_phi_matrix(i,j) <= 1;
%             P_phi_matrix(i,j) >= 0;
        end
    end
cvx_end

b = zeros(A.N,A.N);
for j = 1:A.R%R
    for i = 1:A.Nphi%I
        for m = 1:A.N
            b(m,m) = CCC(i+(j-1)*A.Nphi,i+(j-1)*A.Nphi);
            %b(m,m) = CCC(1,i+(j-1)*A.Nphi);
        end
        P_phi_matrix(:,:,i,j) = b;
    end
end

